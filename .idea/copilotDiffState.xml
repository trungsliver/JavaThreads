<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/concurrentCollection/COWADemo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/concurrentCollection/COWADemo.java" />
              <option name="originalContent" value="package concurrentCollection;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Random;&#10;import java.util.concurrent.CopyOnWriteArrayList;&#10;&#10;public class COWADemo {&#10;    public static void main(String[] args) {&#10;        Simulation simulation = new Simulation();&#10;        simulation.simulate();&#10;    }&#10;}&#10;&#10;&#10;class Simulation {&#10;    private final List&lt;Integer&gt; list;&#10;&#10;    public Simulation() {&#10;        list = new CopyOnWriteArrayList&lt;&gt;();&#10;        list.addAll(Arrays.asList(0,0,0,0,0,0,0,0));&#10;    }&#10;&#10;    public void simulate() {&#10;        Thread one = new Thread(new WriteTask(list));&#10;        Thread two = new Thread(new WriteTask(list));&#10;        Thread three = new Thread(new WriteTask(list));&#10;        Thread four = new Thread(new ReadTask(list));&#10;&#10;        one.start();&#10;        two.start();&#10;        three.start();&#10;        four.start();&#10;    }&#10;}&#10;&#10;class ReadTask implements Runnable {&#10;    private final List&lt;Integer&gt; list;&#10;&#10;    public ReadTask(List&lt;Integer&gt; list) {&#10;        this.list = list;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        while (true) {&#10;            try {&#10;                Thread.sleep(1000);&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;            System.out.println(list);&#10;        }&#10;    }&#10;}&#10;&#10;class WriteTask implements Runnable {&#10;    private List&lt;Integer&gt; list;&#10;    private Random random;&#10;&#10;    public WriteTask(List&lt;Integer&gt; list) {&#10;        this.list = list;&#10;        this.random = new Random();&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        while (true) {&#10;            try {&#10;                Thread.sleep(1200);&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;            list.set(random.nextInt(list.size()), random.nextInt(10));&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package concurrentCollection; // Khai báo package chứa class này&#10;&#10;import java.util.Arrays; // Import lớp Arrays để thao tác với mảng&#10;import java.util.List; // Import interface List&#10;import java.util.Random; // Import lớp Random để sinh số ngẫu nhiên&#10;import java.util.concurrent.CopyOnWriteArrayList; // Import lớp CopyOnWriteArrayList cho collection thread-safe&#10;&#10;public class COWADemo {&#10;    public static void main(String[] args) {&#10;        // Tạo đối tượng Simulation và chạy mô phỏng&#10;        Simulation simulation = new Simulation();&#10;        simulation.simulate();&#10;    }&#10;}&#10;&#10;// Lớp mô phỏng hoạt động đọc/ghi trên danh sách thread-safe&#10;class Simulation {&#10;    private final List&lt;Integer&gt; list; // Danh sách số nguyên dùng CopyOnWriteArrayList&#10;&#10;    public Simulation() {&#10;        list = new CopyOnWriteArrayList&lt;&gt;(); // Khởi tạo danh sách thread-safe&#10;        list.addAll(Arrays.asList(0,0,0,0,0,0,0,0)); // Thêm 8 số 0 vào danh sách&#10;    }&#10;&#10;    public void simulate() {&#10;        // Tạo 3 luồng ghi và 1 luồng đọc&#10;        Thread one = new Thread(new WriteTask(list));&#10;        Thread two = new Thread(new WriteTask(list));&#10;        Thread three = new Thread(new WriteTask(list));&#10;        Thread four = new Thread(new ReadTask(list));&#10;&#10;        // Khởi động các luồng&#10;        one.start();&#10;        two.start();&#10;        three.start();&#10;        four.start();&#10;    }&#10;}&#10;&#10;// Nhiệm vụ đọc danh sách liên tục&#10;class ReadTask implements Runnable {&#10;    private final List&lt;Integer&gt; list;&#10;&#10;    public ReadTask(List&lt;Integer&gt; list) {&#10;        this.list = list;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        while (true) {&#10;            try {&#10;                Thread.sleep(1000); // Dừng 1 giây giữa mỗi lần đọc&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;            System.out.println(list); // In ra danh sách hiện tại&#10;        }&#10;    }&#10;}&#10;&#10;// Nhiệm vụ ghi ngẫu nhiên vào danh sách liên tục&#10;class WriteTask implements Runnable {&#10;    private List&lt;Integer&gt; list;&#10;    private Random random;&#10;&#10;    public WriteTask(List&lt;Integer&gt; list) {&#10;        this.list = list;&#10;        this.random = new Random(); // Khởi tạo đối tượng sinh số ngẫu nhiên&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        while (true) {&#10;            try {&#10;                Thread.sleep(1200); // Dừng 1.2 giây giữa mỗi lần ghi&#10;            } catch (InterruptedException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;            // Ghi giá trị ngẫu nhiên vào vị trí ngẫu nhiên trong danh sách&#10;            list.set(random.nextInt(list.size()), random.nextInt(10));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>