======================= Deadlocks =======================

1. Khái niệm
    - Deadlock (bế tắc) là hiện tượng xảy ra khi hai hay nhiều thread bị chặn vĩnh viễn vì chúng đang chờ nhau giải phóng tài nguyên.
    - Ví dụ kinh điển là hai thread đều cần 2 tài nguyên (A và B) nhưng mỗi thread giữ 1 cái và đợi cái còn lại
        → cả hai không bao giờ tiếp tục được.

2. Cách phát hiện deadlock
    -> ✅ Manual approach (Phương pháp thủ công):
        - Dựa vào dấu hiệu chương trình bị treo hoặc chạy mãi không xong.
        - Dùng các công cụ như: Thread Dump, VisualVM, jConsole, jstack để quan sát trạng thái thread.
        - Nếu nhiều thread ở trạng thái `BLOCKED` và đang chờ cùng một lock → có khả năng bị deadlock.

    -> 🧠 Programmatic approach to detect deadlock (Phương pháp lập trình):
        - Java cung cấp class `ThreadMXBean` để kiểm tra xem có deadlock không.

3. Cách phòng tránh deadlock
    -> Use Timeouts:
        Sử dụng `tryLock(timeout)` từ ReentrantLock để không chờ mãi mãi.

    -> Global ordering of locks:
        Quy định một thứ tự khi lấy lock. VD: luôn lấy lock resource1 trước rồi mới đến resource2.

    -> Avoid nesting of locks:
        Cố gắng tránh việc một thread giữ nhiều lock cùng lúc (nested locks).

    -> Use Thread safe alternatives:
        Dùng các cấu trúc thread-safe có sẵn như: `ConcurrentHashMap`, `BlockingQueue` thay vì tự cài đặt locking.

4. Ví dụ minh họa
        - Đầu bếp A cần dao và thớt để nấu ăn.
        - Đầu bếp B cần thớt và dao.
        - A lấy dao, B lấy thớt. Cả hai chờ nhau mãi để có dụng cụ còn lại
            → Không ai nấu được → Bế tắc!
