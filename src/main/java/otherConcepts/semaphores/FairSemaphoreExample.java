package otherConcepts.semaphores;

import java.util.concurrent.Semaphore;

// √ù nghƒ©a: V√≠ d·ª• v·ªÅ Semaphore v·ªõi t√≠nh c√¥ng b·∫±ng (FIFO)

// M·ª•c ƒë√≠ch: ƒê·∫£m b·∫£o c√°c lu·ªìng l·∫•y permit theo th·ª© t·ª± y√™u c·∫ßu, tr√°nh t√¨nh tr·∫°ng "starvation"

// T√¨nh hu·ªëng: Gi·∫£ l·∫≠p m·ªôt h·ªá th·ªëng c√≥ 4 worker, m·ªói worker s·∫Ω c·ªë g·∫Øng l·∫•y permit t·ª´ Semaphore c√¥ng b·∫±ng.

// L·ª£i √≠ch: Gi√∫p ƒë·∫£m b·∫£o r·∫±ng c√°c lu·ªìng s·∫Ω ƒë∆∞·ª£c ph·ª•c v·ª• theo th·ª© t·ª± y√™u c·∫ßu, tr√°nh t√¨nh tr·∫°ng m·ªôt s·ªë lu·ªìng
            // b·ªã b·ªè qua ho·∫∑c ch·ªù ƒë·ª£i qu√° l√¢u trong khi c√°c lu·ªìng kh√°c li√™n t·ª•c l·∫•y permit.

// C√°ch s·ª≠ d·ª•ng: S·ª≠ d·ª•ng Semaphore v·ªõi tham s·ªë c√¥ng b·∫±ng (true)
        // ƒë·ªÉ ƒë·∫£m b·∫£o r·∫±ng c√°c lu·ªìng s·∫Ω ƒë∆∞·ª£c ph·ª•c v·ª• theo th·ª© t·ª± y√™u c·∫ßu (FIFO - First In, First Out).
        // M·ªói worker s·∫Ω c·ªë g·∫Øng l·∫•y m·ªôt "permit"
        // t·ª´ Semaphore tr∆∞·ªõc khi th·ª±c hi·ªán c√¥ng vi·ªác c·ªßa m√¨nh.
        // Khi ho√†n th√†nh, worker s·∫Ω tr·∫£ l·∫°i permit ƒë·ªÉ c√°c worker kh√°c c√≥ th·ªÉ ti·∫øp t·ª•c c√¥ng vi·ªác.

public class FairSemaphoreExample {
    static Semaphore semaphore = new Semaphore(1, true); // true: c√¥ng b·∫±ng FIFO

    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            Thread t = new Thread(new Worker(i));
            t.start();
        }
    }

    static class Worker implements Runnable {
        int id;

        Worker(int id) {
            this.id = id;
        }

        public void run() {
            try {
                System.out.println("üïí Worker " + id + " ƒëang ch·ªù permit...");
                semaphore.acquire();
                System.out.println("‚úÖ Worker " + id + " acquired permit.");

                Thread.sleep(2000);

                System.out.println("üîÅ Worker " + id + " releasing permit.");
                semaphore.release();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
