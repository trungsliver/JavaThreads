package otherConcepts.semaphores;

import java.util.concurrent.Semaphore;

// √ù nghƒ©a: V√≠ d·ª• ƒë∆°n gi·∫£n v·ªÅ Semaphore trong Java

// M·ª•c ƒë√≠ch: Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng lu·ªìng truy c·∫≠p v√†o t√†i nguy√™n d√πng chung

// T√¨nh hu·ªëng: Gi·∫£ l·∫≠p m·ªôt h·ªá th·ªëng c√≥ 6 worker, nh∆∞ng ch·ªâ cho ph√©p 3 worker c√πng l√∫c truy c·∫≠p v√†o t√†i nguy√™n d√πng chung.

// L·ª£i √≠ch: Gi√∫p tr√°nh t√¨nh tr·∫°ng qu√° t·∫£i t√†i nguy√™n, ƒë·∫£m b·∫£o hi·ªáu su·∫•t v√† ·ªïn ƒë·ªãnh c·ªßa h·ªá th·ªëng.

// C√°ch s·ª≠ d·ª•ng: S·ª≠ d·ª•ng Semaphore ƒë·ªÉ qu·∫£n l√Ω s·ªë l∆∞·ª£ng lu·ªìng c√≥ th·ªÉ truy c·∫≠p v√†o t√†i nguy√™n d√πng chung.
        // M·ªói worker s·∫Ω c·ªë g·∫Øng l·∫•y m·ªôt "permit" t·ª´ Semaphore tr∆∞·ªõc khi th·ª±c hi·ªán c√¥ng vi·ªác c·ªßa m√¨nh.
        // Khi ho√†n th√†nh, worker s·∫Ω tr·∫£ l·∫°i permit ƒë·ªÉ c√°c worker kh√°c c√≥ th·ªÉ ti·∫øp t·ª•c c√¥ng vi·ªác.


public class BasicSemaphoreExample {
    static Semaphore semaphore = new Semaphore(3); // Ch·ªâ cho ph√©p 3 thread c√πng l√∫c

    public static void main(String[] args) {
        for (int i = 1; i <= 6; i++) {
            Thread t = new Thread(new Worker(i));
            t.start();
        }
    }

    static class Worker implements Runnable {
        private int id;

        public Worker(int id) {
            this.id = id;
        }

        public void run() {
            try {
                System.out.println("üü° Worker " + id + " ƒëang ch·ªù permit...");
                semaphore.acquire(); // Ch·ªù permit
                System.out.println("‚úÖ Worker " + id + " ƒë√£ l·∫•y permit");

                Thread.sleep(2000); // Gi·∫£ l·∫≠p c√¥ng vi·ªác m·∫•t th·ªùi gian

                System.out.println("üî¥ Worker " + id + " tr·∫£ l·∫°i permit");
                semaphore.release(); // Tr·∫£ l·∫°i permit
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
