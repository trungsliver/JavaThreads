package otherConcepts.semaphores;

import java.util.concurrent.Semaphore;

// √Ω nghƒ©a: V√≠ d·ª• v·ªÅ Semaphore v·ªõi tryAcquire

// M·ª•c ƒë√≠ch: Cho ph√©p lu·ªìng c·ªë g·∫Øng l·∫•y permit m√† kh√¥ng b·ªã ch·∫∑n n·∫øu kh√¥ng c√≥ permit s·∫µn

// T√¨nh hu·ªëng: Gi·∫£ l·∫≠p m·ªôt h·ªá th·ªëng c√≥ 2 lu·ªìng, m·ªói lu·ªìng c·ªë g·∫Øng l·∫•y permit t·ª´ Semaphore.

// L·ª£i √≠ch: Gi√∫p tr√°nh t√¨nh tr·∫°ng ch·ªù ƒë·ª£i v√¥ h·∫°n n·∫øu kh√¥ng c√≥ permit s·∫µn,
            // cho ph√©p lu·ªìng th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c permit.

// C√°ch s·ª≠ d·ª•ng:
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c tryAcquire() c·ªßa Semaphore ƒë·ªÉ c·ªë g·∫Øng l·∫•y permit m√† kh√¥ng b·ªã ch·∫∑n.
    // N·∫øu kh√¥ng c√≥ permit s·∫µn, lu·ªìng s·∫Ω nh·∫≠n ƒë∆∞·ª£c gi√° tr·ªã false v√† c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c ho·∫∑c th√¥ng b√°o kh√¥ng l·∫•y ƒë∆∞·ª£c permit.
    // V√≠ d·ª• n√†y m√¥ ph·ªèng m·ªôt h·ªá th·ªëng c√≥ 2 lu·ªìng, m·ªói lu·ªìng c·ªë g·∫Øng l·∫•y permit t·ª´ Semaphore c√≥ 1 permit.
    // Lu·ªìng ƒë·∫ßu ti√™n (T1) s·∫Ω l·∫•y permit v√† gi·ªØ trong 2 gi√¢y, trong khi lu·ªìng th·ª© hai (T2) s·∫Ω c·ªë g·∫Øng l·∫•y permit
            // nh∆∞ng s·∫Ω kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c v√¨ T1 ƒëang gi·ªØ permit ƒë√≥.
    // ƒêi·ªÅu n√†y cho th·∫•y c√°ch s·ª≠ d·ª•ng Semaphore v·ªõi tryAcquire ƒë·ªÉ qu·∫£n l√Ω truy c·∫≠p ƒë·ªìng th·ªùi v√†o t√†i nguy√™n d√πng chung
            // m√† kh√¥ng b·ªã ch·∫∑n ho√†n to√†n n·∫øu kh√¥ng c√≥ permit s·∫µn.



public class TryAcquireExample {
    static Semaphore semaphore = new Semaphore(1);

    public static void main(String[] args) {
        Thread t1 = new Thread(() -> {
            if (semaphore.tryAcquire()) {
                try {
                    System.out.println("‚úÖ Thread T1 acquired permit.");
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    semaphore.release();
                    System.out.println("üî¥ Thread T1 released permit.");
                }
            } else {
                System.out.println("‚ö†Ô∏è Thread T1 couldn't acquire permit.");
            }
        });

        Thread t2 = new Thread(() -> {
            if (semaphore.tryAcquire()) {
                try {
                    System.out.println("‚úÖ Thread T2 acquired permit.");
                } finally {
                    semaphore.release();
                }
            } else {
                System.out.println("‚ö†Ô∏è Thread T2 couldn't acquire permit.");
            }
        });

        t1.start();
        t2.start();
    }
}
