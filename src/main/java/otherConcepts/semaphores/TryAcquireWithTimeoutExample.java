package otherConcepts.semaphores;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

// √ù nghƒ©a: V√≠ d·ª• v·ªÅ Semaphore v·ªõi tryAcquire v√† timeout

// M·ª•c ƒë√≠ch: Cho ph√©p lu·ªìng c·ªë g·∫Øng l·∫•y permit trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh, tr√°nh t√¨nh tr·∫°ng ch·ªù ƒë·ª£i v√¥ h·∫°n

// T√¨nh hu·ªëng: Gi·∫£ l·∫≠p m·ªôt h·ªá th·ªëng c√≥ 2 lu·ªìng, trong ƒë√≥ m·ªôt lu·ªìng (T1) gi·ªØ permit trong 4 gi√¢y,
            // v√† lu·ªìng th·ª© hai (T2) c·ªë g·∫Øng l·∫•y permit trong 2 gi√¢y.

// L·ª£i √≠ch: Gi√∫p tr√°nh t√¨nh tr·∫°ng ch·ªù ƒë·ª£i v√¥ h·∫°n n·∫øu kh√¥ng c√≥ permit s·∫µn,
            // cho ph√©p lu·ªìng th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c ho·∫∑c th√¥ng b√°o kh√¥ng l·∫•y ƒë∆∞·ª£c permit n·∫øu qu√° th·ªùi gian ch·ªù.

// C√°ch s·ª≠ d·ª•ng:
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c tryAcquire(long timeout, TimeUnit unit) c·ªßa Semaphore ƒë·ªÉ c·ªë g·∫Øng l·∫•y permit trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.
    // N·∫øu kh√¥ng c√≥ permit s·∫µn trong kho·∫£ng th·ªùi gian ƒë√≥, lu·ªìng s·∫Ω nh·∫≠n ƒë∆∞·ª£c gi√° tr·ªã false v√† c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c
        // ho·∫∑c th√¥ng b√°o kh√¥ng l·∫•y ƒë∆∞·ª£c permit.
    // V√≠ d·ª• n√†y m√¥ ph·ªèng m·ªôt h·ªá th·ªëng c√≥ 2 lu·ªìng, trong ƒë√≥ T1 s·∫Ω l·∫•y permit v√† gi·ªØ trong 4 gi√¢y, trong khi T2 s·∫Ω c·ªë g·∫Øng l·∫•y permit trong 2 gi√¢y.
    // N·∫øu T2 kh√¥ng l·∫•y ƒë∆∞·ª£c permit trong kho·∫£ng th·ªùi gian ƒë√≥, n√≥ s·∫Ω th√¥ng b√°o r·∫±ng kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c permit.
    // ƒêi·ªÅu n√†y cho th·∫•y c√°ch s·ª≠ d·ª•ng Semaphore v·ªõi tryAcquire v√† timeout ƒë·ªÉ qu·∫£n l√Ω truy c·∫≠p ƒë·ªìng th·ªùi v√†o t√†i nguy√™n d√πng chung
        // m√† kh√¥ng b·ªã ch·∫∑n ho√†n to√†n n·∫øu kh√¥ng c√≥ permit s·∫µn trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.

public class TryAcquireWithTimeoutExample {
    static Semaphore semaphore = new Semaphore(1);

    public static void main(String[] args) throws InterruptedException {
        Thread t1 = new Thread(() -> {
            try {
                semaphore.acquire();
                System.out.println("‚úÖ T1 acquired permit.");
                Thread.sleep(4000); // Gi·ªØ permit 4 gi√¢y
                semaphore.release();
                System.out.println("üî¥ T1 released permit.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        Thread t2 = new Thread(() -> {
            try {
                System.out.println("T2 ƒëang ƒë·ª£i permit trong 2 gi√¢y...");
                if (semaphore.tryAcquire(2, TimeUnit.SECONDS)) {
                    try {
                        System.out.println("‚úÖ T2 acquired permit.");
                    } finally {
                        semaphore.release();
                    }
                } else {
                    System.out.println("‚ùå T2 timeout, kh√¥ng l·∫•y ƒë∆∞·ª£c permit.");
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        t1.start();
        Thread.sleep(100); // T1 chi·∫øm tr∆∞·ªõc permit
        t2.start();
    }
}
